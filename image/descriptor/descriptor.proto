// Copyright (C) 2013 The Regents of the University of California (Regents).
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//
//     * Neither the name of The Regents or University of California nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL CHRIS SWEENEY BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Please contact the author of this library if you have any questions.
// Author: Chris Sweeney (cmsweeney@cs.ucsb.edu)

syntax = "proto2";

package theia;
import "image/keypoint_detector/keypoint.proto";

message DescriptorProto {
  // ID of the descritor.
  optional int32 descriptor_id = 1;

  // ID of the image the descriptor belongs to.
  optional int32 image_id = 2;

  // Keypoint that the descriptor was extracted from.
  optional KeypointProto keypoint = 3;
  
  // Binary descriptors can be loaded/stored as strings when using std::bitset.
  optional string binary_descriptor = 4;
  // Float array for descriptors.
  repeated float float_descriptor = 5;

  // Strength of keypoint (if applicable).
  optional double strength = 6;
  // Orientation of keypoint (if applicable).
  optional double orientation = 7;
  // Scale of the keypoint (if applicable).
  optional double scale = 8;

  // 3D Track associated with this descriptor.
  optional int32 track_id = 9;

  // Color used for point cloud reconstruction.
  message Color {
    optional float r = 1;
    optional float g = 2;
    optional float b = 3;
  }
  optional Color color = 10;

  // What type of descriptor extracted this.
  enum DescriptorType {
    OTHER = 0;
    BRIEF = 1;
    DAISY = 2;
    PATCH = 3;
    SIFT = 4;
    BRISK = 5;
  }
  optional DescriptorType descriptor_type = 11;
}

message DescriptorsProto {
  // "Container" for all descriptors.
  repeated DescriptorProto feature_descriptor = 1;
}