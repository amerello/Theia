// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image/descriptor/descriptor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image/descriptor/descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace theia {

namespace {

const ::google::protobuf::Descriptor* DescriptorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DescriptorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DescriptorProto_Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DescriptorProto_Color_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DescriptorProto_DescriptorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DescriptorsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DescriptorsProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_image_2fdescriptor_2fdescriptor_2eproto() {
  protobuf_AddDesc_image_2fdescriptor_2fdescriptor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "image/descriptor/descriptor.proto");
  GOOGLE_CHECK(file != NULL);
  DescriptorProto_descriptor_ = file->message_type(0);
  static const int DescriptorProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, descriptor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, keypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, binary_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, float_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, track_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, descriptor_type_),
  };
  DescriptorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DescriptorProto_descriptor_,
      DescriptorProto::default_instance_,
      DescriptorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DescriptorProto));
  DescriptorProto_Color_descriptor_ = DescriptorProto_descriptor_->nested_type(0);
  static const int DescriptorProto_Color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_Color, b_),
  };
  DescriptorProto_Color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DescriptorProto_Color_descriptor_,
      DescriptorProto_Color::default_instance_,
      DescriptorProto_Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_Color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorProto_Color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DescriptorProto_Color));
  DescriptorProto_DescriptorType_descriptor_ = DescriptorProto_descriptor_->enum_type(0);
  DescriptorsProto_descriptor_ = file->message_type(1);
  static const int DescriptorsProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorsProto, feature_descriptor_),
  };
  DescriptorsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DescriptorsProto_descriptor_,
      DescriptorsProto::default_instance_,
      DescriptorsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescriptorsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DescriptorsProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_image_2fdescriptor_2fdescriptor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DescriptorProto_descriptor_, &DescriptorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DescriptorProto_Color_descriptor_, &DescriptorProto_Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DescriptorsProto_descriptor_, &DescriptorsProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_image_2fdescriptor_2fdescriptor_2eproto() {
  delete DescriptorProto::default_instance_;
  delete DescriptorProto_reflection_;
  delete DescriptorProto_Color::default_instance_;
  delete DescriptorProto_Color_reflection_;
  delete DescriptorsProto::default_instance_;
  delete DescriptorsProto_reflection_;
}

void protobuf_AddDesc_image_2fdescriptor_2fdescriptor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::theia::protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!image/descriptor/descriptor.proto\022\005the"
    "ia\032&image/keypoint_detector/keypoint.pro"
    "to\"\311\003\n\017DescriptorProto\022\025\n\rdescriptor_id\030"
    "\001 \001(\005\022\020\n\010image_id\030\002 \001(\005\022&\n\010keypoint\030\003 \001("
    "\0132\024.theia.KeypointProto\022\031\n\021binary_descri"
    "ptor\030\004 \001(\t\022\030\n\020float_descriptor\030\005 \003(\002\022\020\n\010"
    "strength\030\006 \001(\001\022\023\n\013orientation\030\007 \001(\001\022\r\n\005s"
    "cale\030\010 \001(\001\022\020\n\010track_id\030\t \001(\005\022+\n\005color\030\n "
    "\001(\0132\034.theia.DescriptorProto.Color\022>\n\017des"
    "criptor_type\030\013 \001(\0162%.theia.DescriptorPro"
    "to.DescriptorType\032(\n\005Color\022\t\n\001r\030\001 \001(\002\022\t\n"
    "\001g\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\"Q\n\016DescriptorType\022\t\n"
    "\005OTHER\020\000\022\t\n\005BRIEF\020\001\022\t\n\005DAISY\020\002\022\t\n\005PATCH\020"
    "\003\022\010\n\004SIFT\020\004\022\t\n\005BRISK\020\005\"F\n\020DescriptorsPro"
    "to\0222\n\022feature_descriptor\030\001 \003(\0132\026.theia.D"
    "escriptorProto", 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image/descriptor/descriptor.proto", &protobuf_RegisterTypes);
  DescriptorProto::default_instance_ = new DescriptorProto();
  DescriptorProto_Color::default_instance_ = new DescriptorProto_Color();
  DescriptorsProto::default_instance_ = new DescriptorsProto();
  DescriptorProto::default_instance_->InitAsDefaultInstance();
  DescriptorProto_Color::default_instance_->InitAsDefaultInstance();
  DescriptorsProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_image_2fdescriptor_2fdescriptor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_image_2fdescriptor_2fdescriptor_2eproto {
  StaticDescriptorInitializer_image_2fdescriptor_2fdescriptor_2eproto() {
    protobuf_AddDesc_image_2fdescriptor_2fdescriptor_2eproto();
  }
} static_descriptor_initializer_image_2fdescriptor_2fdescriptor_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DescriptorProto_DescriptorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescriptorProto_DescriptorType_descriptor_;
}
bool DescriptorProto_DescriptorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DescriptorProto_DescriptorType DescriptorProto::OTHER;
const DescriptorProto_DescriptorType DescriptorProto::BRIEF;
const DescriptorProto_DescriptorType DescriptorProto::DAISY;
const DescriptorProto_DescriptorType DescriptorProto::PATCH;
const DescriptorProto_DescriptorType DescriptorProto::SIFT;
const DescriptorProto_DescriptorType DescriptorProto::BRISK;
const DescriptorProto_DescriptorType DescriptorProto::DescriptorType_MIN;
const DescriptorProto_DescriptorType DescriptorProto::DescriptorType_MAX;
const int DescriptorProto::DescriptorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DescriptorProto_Color::kRFieldNumber;
const int DescriptorProto_Color::kGFieldNumber;
const int DescriptorProto_Color::kBFieldNumber;
#endif  // !_MSC_VER

DescriptorProto_Color::DescriptorProto_Color()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DescriptorProto_Color::InitAsDefaultInstance() {
}

DescriptorProto_Color::DescriptorProto_Color(const DescriptorProto_Color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DescriptorProto_Color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DescriptorProto_Color::~DescriptorProto_Color() {
  SharedDtor();
}

void DescriptorProto_Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DescriptorProto_Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescriptorProto_Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescriptorProto_Color_descriptor_;
}

const DescriptorProto_Color& DescriptorProto_Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2fdescriptor_2fdescriptor_2eproto();
  return *default_instance_;
}

DescriptorProto_Color* DescriptorProto_Color::default_instance_ = NULL;

DescriptorProto_Color* DescriptorProto_Color::New() const {
  return new DescriptorProto_Color;
}

void DescriptorProto_Color::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DescriptorProto_Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_g;
        break;
      }

      // optional float g = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_b;
        break;
      }

      // optional float b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DescriptorProto_Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // optional float g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // optional float b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DescriptorProto_Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // optional float g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // optional float b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DescriptorProto_Color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float r = 1;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // optional float g = 2;
    if (has_g()) {
      total_size += 1 + 4;
    }

    // optional float b = 3;
    if (has_b()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescriptorProto_Color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DescriptorProto_Color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DescriptorProto_Color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DescriptorProto_Color::MergeFrom(const DescriptorProto_Color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DescriptorProto_Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorProto_Color::CopyFrom(const DescriptorProto_Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorProto_Color::IsInitialized() const {

  return true;
}

void DescriptorProto_Color::Swap(DescriptorProto_Color* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DescriptorProto_Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DescriptorProto_Color_descriptor_;
  metadata.reflection = DescriptorProto_Color_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DescriptorProto::kDescriptorIdFieldNumber;
const int DescriptorProto::kImageIdFieldNumber;
const int DescriptorProto::kKeypointFieldNumber;
const int DescriptorProto::kBinaryDescriptorFieldNumber;
const int DescriptorProto::kFloatDescriptorFieldNumber;
const int DescriptorProto::kStrengthFieldNumber;
const int DescriptorProto::kOrientationFieldNumber;
const int DescriptorProto::kScaleFieldNumber;
const int DescriptorProto::kTrackIdFieldNumber;
const int DescriptorProto::kColorFieldNumber;
const int DescriptorProto::kDescriptorTypeFieldNumber;
#endif  // !_MSC_VER

DescriptorProto::DescriptorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DescriptorProto::InitAsDefaultInstance() {
  keypoint_ = const_cast< ::theia::KeypointProto*>(&::theia::KeypointProto::default_instance());
  color_ = const_cast< ::theia::DescriptorProto_Color*>(&::theia::DescriptorProto_Color::default_instance());
}

DescriptorProto::DescriptorProto(const DescriptorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DescriptorProto::SharedCtor() {
  _cached_size_ = 0;
  descriptor_id_ = 0;
  image_id_ = 0;
  keypoint_ = NULL;
  binary_descriptor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strength_ = 0;
  orientation_ = 0;
  scale_ = 0;
  track_id_ = 0;
  color_ = NULL;
  descriptor_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DescriptorProto::~DescriptorProto() {
  SharedDtor();
}

void DescriptorProto::SharedDtor() {
  if (binary_descriptor_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_descriptor_;
  }
  if (this != default_instance_) {
    delete keypoint_;
    delete color_;
  }
}

void DescriptorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescriptorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescriptorProto_descriptor_;
}

const DescriptorProto& DescriptorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2fdescriptor_2fdescriptor_2eproto();
  return *default_instance_;
}

DescriptorProto* DescriptorProto::default_instance_ = NULL;

DescriptorProto* DescriptorProto::New() const {
  return new DescriptorProto;
}

void DescriptorProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    descriptor_id_ = 0;
    image_id_ = 0;
    if (has_keypoint()) {
      if (keypoint_ != NULL) keypoint_->::theia::KeypointProto::Clear();
    }
    if (has_binary_descriptor()) {
      if (binary_descriptor_ != &::google::protobuf::internal::kEmptyString) {
        binary_descriptor_->clear();
      }
    }
    strength_ = 0;
    orientation_ = 0;
    scale_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    track_id_ = 0;
    if (has_color()) {
      if (color_ != NULL) color_->::theia::DescriptorProto_Color::Clear();
    }
    descriptor_type_ = 0;
  }
  float_descriptor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DescriptorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 descriptor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &descriptor_id_)));
          set_has_descriptor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_image_id;
        break;
      }

      // optional int32 image_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_id_)));
          set_has_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keypoint;
        break;
      }

      // optional .theia.KeypointProto keypoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keypoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_binary_descriptor;
        break;
      }

      // optional string binary_descriptor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary_descriptor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->binary_descriptor().data(), this->binary_descriptor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_float_descriptor;
        break;
      }

      // repeated float float_descriptor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_descriptor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_float_descriptor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_descriptor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_float_descriptor;
        if (input->ExpectTag(49)) goto parse_strength;
        break;
      }

      // optional double strength = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_orientation;
        break;
      }

      // optional double orientation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_scale;
        break;
      }

      // optional double scale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_track_id;
        break;
      }

      // optional int32 track_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
          set_has_track_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_color;
        break;
      }

      // optional .theia.DescriptorProto.Color color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_descriptor_type;
        break;
      }

      // optional .theia.DescriptorProto.DescriptorType descriptor_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_descriptor_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::theia::DescriptorProto_DescriptorType_IsValid(value)) {
            set_descriptor_type(static_cast< ::theia::DescriptorProto_DescriptorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DescriptorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 descriptor_id = 1;
  if (has_descriptor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->descriptor_id(), output);
  }

  // optional int32 image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->image_id(), output);
  }

  // optional .theia.KeypointProto keypoint = 3;
  if (has_keypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keypoint(), output);
  }

  // optional string binary_descriptor = 4;
  if (has_binary_descriptor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binary_descriptor().data(), this->binary_descriptor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->binary_descriptor(), output);
  }

  // repeated float float_descriptor = 5;
  for (int i = 0; i < this->float_descriptor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->float_descriptor(i), output);
  }

  // optional double strength = 6;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->strength(), output);
  }

  // optional double orientation = 7;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->orientation(), output);
  }

  // optional double scale = 8;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->scale(), output);
  }

  // optional int32 track_id = 9;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->track_id(), output);
  }

  // optional .theia.DescriptorProto.Color color = 10;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->color(), output);
  }

  // optional .theia.DescriptorProto.DescriptorType descriptor_type = 11;
  if (has_descriptor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->descriptor_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DescriptorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 descriptor_id = 1;
  if (has_descriptor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->descriptor_id(), target);
  }

  // optional int32 image_id = 2;
  if (has_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->image_id(), target);
  }

  // optional .theia.KeypointProto keypoint = 3;
  if (has_keypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keypoint(), target);
  }

  // optional string binary_descriptor = 4;
  if (has_binary_descriptor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binary_descriptor().data(), this->binary_descriptor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->binary_descriptor(), target);
  }

  // repeated float float_descriptor = 5;
  for (int i = 0; i < this->float_descriptor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->float_descriptor(i), target);
  }

  // optional double strength = 6;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->strength(), target);
  }

  // optional double orientation = 7;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->orientation(), target);
  }

  // optional double scale = 8;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->scale(), target);
  }

  // optional int32 track_id = 9;
  if (has_track_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->track_id(), target);
  }

  // optional .theia.DescriptorProto.Color color = 10;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->color(), target);
  }

  // optional .theia.DescriptorProto.DescriptorType descriptor_type = 11;
  if (has_descriptor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->descriptor_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DescriptorProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 descriptor_id = 1;
    if (has_descriptor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->descriptor_id());
    }

    // optional int32 image_id = 2;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_id());
    }

    // optional .theia.KeypointProto keypoint = 3;
    if (has_keypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keypoint());
    }

    // optional string binary_descriptor = 4;
    if (has_binary_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binary_descriptor());
    }

    // optional double strength = 6;
    if (has_strength()) {
      total_size += 1 + 8;
    }

    // optional double orientation = 7;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

    // optional double scale = 8;
    if (has_scale()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 track_id = 9;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_id());
    }

    // optional .theia.DescriptorProto.Color color = 10;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional .theia.DescriptorProto.DescriptorType descriptor_type = 11;
    if (has_descriptor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->descriptor_type());
    }

  }
  // repeated float float_descriptor = 5;
  {
    int data_size = 0;
    data_size = 4 * this->float_descriptor_size();
    total_size += 1 * this->float_descriptor_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescriptorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DescriptorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DescriptorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DescriptorProto::MergeFrom(const DescriptorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  float_descriptor_.MergeFrom(from.float_descriptor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_descriptor_id()) {
      set_descriptor_id(from.descriptor_id());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
    if (from.has_keypoint()) {
      mutable_keypoint()->::theia::KeypointProto::MergeFrom(from.keypoint());
    }
    if (from.has_binary_descriptor()) {
      set_binary_descriptor(from.binary_descriptor());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
    if (from.has_color()) {
      mutable_color()->::theia::DescriptorProto_Color::MergeFrom(from.color());
    }
    if (from.has_descriptor_type()) {
      set_descriptor_type(from.descriptor_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DescriptorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorProto::CopyFrom(const DescriptorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorProto::IsInitialized() const {

  return true;
}

void DescriptorProto::Swap(DescriptorProto* other) {
  if (other != this) {
    std::swap(descriptor_id_, other->descriptor_id_);
    std::swap(image_id_, other->image_id_);
    std::swap(keypoint_, other->keypoint_);
    std::swap(binary_descriptor_, other->binary_descriptor_);
    float_descriptor_.Swap(&other->float_descriptor_);
    std::swap(strength_, other->strength_);
    std::swap(orientation_, other->orientation_);
    std::swap(scale_, other->scale_);
    std::swap(track_id_, other->track_id_);
    std::swap(color_, other->color_);
    std::swap(descriptor_type_, other->descriptor_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DescriptorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DescriptorProto_descriptor_;
  metadata.reflection = DescriptorProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DescriptorsProto::kFeatureDescriptorFieldNumber;
#endif  // !_MSC_VER

DescriptorsProto::DescriptorsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DescriptorsProto::InitAsDefaultInstance() {
}

DescriptorsProto::DescriptorsProto(const DescriptorsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DescriptorsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DescriptorsProto::~DescriptorsProto() {
  SharedDtor();
}

void DescriptorsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DescriptorsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescriptorsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DescriptorsProto_descriptor_;
}

const DescriptorsProto& DescriptorsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2fdescriptor_2fdescriptor_2eproto();
  return *default_instance_;
}

DescriptorsProto* DescriptorsProto::default_instance_ = NULL;

DescriptorsProto* DescriptorsProto::New() const {
  return new DescriptorsProto;
}

void DescriptorsProto::Clear() {
  feature_descriptor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DescriptorsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .theia.DescriptorProto feature_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_feature_descriptor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DescriptorsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .theia.DescriptorProto feature_descriptor = 1;
  for (int i = 0; i < this->feature_descriptor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feature_descriptor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DescriptorsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .theia.DescriptorProto feature_descriptor = 1;
  for (int i = 0; i < this->feature_descriptor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->feature_descriptor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DescriptorsProto::ByteSize() const {
  int total_size = 0;

  // repeated .theia.DescriptorProto feature_descriptor = 1;
  total_size += 1 * this->feature_descriptor_size();
  for (int i = 0; i < this->feature_descriptor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature_descriptor(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescriptorsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DescriptorsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DescriptorsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DescriptorsProto::MergeFrom(const DescriptorsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_descriptor_.MergeFrom(from.feature_descriptor_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DescriptorsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorsProto::CopyFrom(const DescriptorsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorsProto::IsInitialized() const {

  return true;
}

void DescriptorsProto::Swap(DescriptorsProto* other) {
  if (other != this) {
    feature_descriptor_.Swap(&other->feature_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DescriptorsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DescriptorsProto_descriptor_;
  metadata.reflection = DescriptorsProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace theia

// @@protoc_insertion_point(global_scope)
