// Copyright (C) 2013 The Regents of the University of California (Regents).
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//
//     * Neither the name of The Regents or University of California nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL CHRIS SWEENEY BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Please contact the author of this library if you have any questions.
// Author: Chris Sweeney (cmsweeney@cs.ucsb.edu)

syntax = "proto2";

package theia;

// This should be an all-encompassing proto for keypoints of any type. As new
// types of keypoint detectors are added, we can simply add an optional field to
// this proto to allow for serialization. Be sure to add new descriptors to the
// KeypointType enum.
message KeypointProto {
  // ID of the keypoint.
  optional int32 keypoint_id = 1;

  // ID of the image it belongs to.
  optional int32 image_id = 2;
  
  enum KeypointType {
    HAAR = 0;
    FAST = 1;
    HARRIS = 2;
  }
  optional KeypointType keypoint_detector = 3;
  
  message Location {
    // X-location in the image of the keypoint.
    optional double x = 1;
    // Y-location in the image of the keypoint
    optional double y = 2;
  }
  optional Location position = 4;

  // Strength of keypoint (if applicable).
  optional double strength = 5;
  // Orientation of keypoint (if applicable).
  optional double orientation = 6;

  // Track id for 3D points.
  optional int32 track_id = 7;
}

message KeypointsProto {
  // "Container" for all keypoints.
  repeated KeypointProto keypoints = 1;
}