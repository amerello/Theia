// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image/keypoint_detector/keypoint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image/keypoint_detector/keypoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace theia {

namespace {

const ::google::protobuf::Descriptor* KeypointProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeypointProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeypointProto_Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeypointProto_Location_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KeypointProto_KeypointType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KeypointsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeypointsProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto() {
  protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "image/keypoint_detector/keypoint.proto");
  GOOGLE_CHECK(file != NULL);
  KeypointProto_descriptor_ = file->message_type(0);
  static const int KeypointProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, keypoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, keypoint_detector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, track_id_),
  };
  KeypointProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeypointProto_descriptor_,
      KeypointProto::default_instance_,
      KeypointProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeypointProto));
  KeypointProto_Location_descriptor_ = KeypointProto_descriptor_->nested_type(0);
  static const int KeypointProto_Location_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto_Location, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto_Location, y_),
  };
  KeypointProto_Location_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeypointProto_Location_descriptor_,
      KeypointProto_Location::default_instance_,
      KeypointProto_Location_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto_Location, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointProto_Location, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeypointProto_Location));
  KeypointProto_KeypointType_descriptor_ = KeypointProto_descriptor_->enum_type(0);
  KeypointsProto_descriptor_ = file->message_type(1);
  static const int KeypointsProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointsProto, keypoint_),
  };
  KeypointsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeypointsProto_descriptor_,
      KeypointsProto::default_instance_,
      KeypointsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeypointsProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeypointProto_descriptor_, &KeypointProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeypointProto_Location_descriptor_, &KeypointProto_Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeypointsProto_descriptor_, &KeypointsProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_image_2fkeypoint_5fdetector_2fkeypoint_2eproto() {
  delete KeypointProto::default_instance_;
  delete KeypointProto_reflection_;
  delete KeypointProto_Location::default_instance_;
  delete KeypointProto_Location_reflection_;
  delete KeypointsProto::default_instance_;
  delete KeypointsProto_reflection_;
}

void protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&image/keypoint_detector/keypoint.proto"
    "\022\005theia\"\340\002\n\rKeypointProto\022\023\n\013keypoint_id"
    "\030\001 \001(\005\022\020\n\010image_id\030\002 \001(\005\022<\n\021keypoint_det"
    "ector\030\003 \001(\0162!.theia.KeypointProto.Keypoi"
    "ntType\022/\n\010location\030\004 \001(\0132\035.theia.Keypoin"
    "tProto.Location\022\020\n\010strength\030\005 \001(\001\022\023\n\013ori"
    "entation\030\006 \001(\001\022\r\n\005scale\030\007 \001(\001\022\020\n\010track_i"
    "d\030\010 \001(\005\032 \n\010Location\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001("
    "\001\"O\n\014KeypointType\022\t\n\005OTHER\020\000\022\010\n\004FAST\020\001\022\n"
    "\n\006HARRIS\020\002\022\010\n\004SIFT\020\003\022\t\n\005AGAST\020\004\022\t\n\005BRISK"
    "\020\005\"8\n\016KeypointsProto\022&\n\010keypoint\030\001 \003(\0132\024"
    ".theia.KeypointProto", 460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image/keypoint_detector/keypoint.proto", &protobuf_RegisterTypes);
  KeypointProto::default_instance_ = new KeypointProto();
  KeypointProto_Location::default_instance_ = new KeypointProto_Location();
  KeypointsProto::default_instance_ = new KeypointsProto();
  KeypointProto::default_instance_->InitAsDefaultInstance();
  KeypointProto_Location::default_instance_->InitAsDefaultInstance();
  KeypointsProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_image_2fkeypoint_5fdetector_2fkeypoint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_image_2fkeypoint_5fdetector_2fkeypoint_2eproto {
  StaticDescriptorInitializer_image_2fkeypoint_5fdetector_2fkeypoint_2eproto() {
    protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto();
  }
} static_descriptor_initializer_image_2fkeypoint_5fdetector_2fkeypoint_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* KeypointProto_KeypointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeypointProto_KeypointType_descriptor_;
}
bool KeypointProto_KeypointType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KeypointProto_KeypointType KeypointProto::OTHER;
const KeypointProto_KeypointType KeypointProto::FAST;
const KeypointProto_KeypointType KeypointProto::HARRIS;
const KeypointProto_KeypointType KeypointProto::SIFT;
const KeypointProto_KeypointType KeypointProto::AGAST;
const KeypointProto_KeypointType KeypointProto::BRISK;
const KeypointProto_KeypointType KeypointProto::KeypointType_MIN;
const KeypointProto_KeypointType KeypointProto::KeypointType_MAX;
const int KeypointProto::KeypointType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int KeypointProto_Location::kXFieldNumber;
const int KeypointProto_Location::kYFieldNumber;
#endif  // !_MSC_VER

KeypointProto_Location::KeypointProto_Location()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeypointProto_Location::InitAsDefaultInstance() {
}

KeypointProto_Location::KeypointProto_Location(const KeypointProto_Location& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeypointProto_Location::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeypointProto_Location::~KeypointProto_Location() {
  SharedDtor();
}

void KeypointProto_Location::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeypointProto_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeypointProto_Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeypointProto_Location_descriptor_;
}

const KeypointProto_Location& KeypointProto_Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto();
  return *default_instance_;
}

KeypointProto_Location* KeypointProto_Location::default_instance_ = NULL;

KeypointProto_Location* KeypointProto_Location::New() const {
  return new KeypointProto_Location;
}

void KeypointProto_Location::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeypointProto_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeypointProto_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeypointProto_Location::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeypointProto_Location::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeypointProto_Location::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeypointProto_Location* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeypointProto_Location*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeypointProto_Location::MergeFrom(const KeypointProto_Location& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeypointProto_Location::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeypointProto_Location::CopyFrom(const KeypointProto_Location& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointProto_Location::IsInitialized() const {

  return true;
}

void KeypointProto_Location::Swap(KeypointProto_Location* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeypointProto_Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeypointProto_Location_descriptor_;
  metadata.reflection = KeypointProto_Location_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int KeypointProto::kKeypointIdFieldNumber;
const int KeypointProto::kImageIdFieldNumber;
const int KeypointProto::kKeypointDetectorFieldNumber;
const int KeypointProto::kLocationFieldNumber;
const int KeypointProto::kStrengthFieldNumber;
const int KeypointProto::kOrientationFieldNumber;
const int KeypointProto::kScaleFieldNumber;
const int KeypointProto::kTrackIdFieldNumber;
#endif  // !_MSC_VER

KeypointProto::KeypointProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeypointProto::InitAsDefaultInstance() {
  location_ = const_cast< ::theia::KeypointProto_Location*>(&::theia::KeypointProto_Location::default_instance());
}

KeypointProto::KeypointProto(const KeypointProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeypointProto::SharedCtor() {
  _cached_size_ = 0;
  keypoint_id_ = 0;
  image_id_ = 0;
  keypoint_detector_ = 0;
  location_ = NULL;
  strength_ = 0;
  orientation_ = 0;
  scale_ = 0;
  track_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeypointProto::~KeypointProto() {
  SharedDtor();
}

void KeypointProto::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void KeypointProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeypointProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeypointProto_descriptor_;
}

const KeypointProto& KeypointProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto();
  return *default_instance_;
}

KeypointProto* KeypointProto::default_instance_ = NULL;

KeypointProto* KeypointProto::New() const {
  return new KeypointProto;
}

void KeypointProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    keypoint_id_ = 0;
    image_id_ = 0;
    keypoint_detector_ = 0;
    if (has_location()) {
      if (location_ != NULL) location_->::theia::KeypointProto_Location::Clear();
    }
    strength_ = 0;
    orientation_ = 0;
    scale_ = 0;
    track_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeypointProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 keypoint_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keypoint_id_)));
          set_has_keypoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_image_id;
        break;
      }

      // optional int32 image_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_id_)));
          set_has_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keypoint_detector;
        break;
      }

      // optional .theia.KeypointProto.KeypointType keypoint_detector = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keypoint_detector:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::theia::KeypointProto_KeypointType_IsValid(value)) {
            set_keypoint_detector(static_cast< ::theia::KeypointProto_KeypointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional .theia.KeypointProto.Location location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_strength;
        break;
      }

      // optional double strength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_orientation;
        break;
      }

      // optional double orientation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_scale;
        break;
      }

      // optional double scale = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_track_id;
        break;
      }

      // optional int32 track_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
          set_has_track_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeypointProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 keypoint_id = 1;
  if (has_keypoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->keypoint_id(), output);
  }

  // optional int32 image_id = 2;
  if (has_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->image_id(), output);
  }

  // optional .theia.KeypointProto.KeypointType keypoint_detector = 3;
  if (has_keypoint_detector()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->keypoint_detector(), output);
  }

  // optional .theia.KeypointProto.Location location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(), output);
  }

  // optional double strength = 5;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->strength(), output);
  }

  // optional double orientation = 6;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->orientation(), output);
  }

  // optional double scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->scale(), output);
  }

  // optional int32 track_id = 8;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->track_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeypointProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 keypoint_id = 1;
  if (has_keypoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->keypoint_id(), target);
  }

  // optional int32 image_id = 2;
  if (has_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->image_id(), target);
  }

  // optional .theia.KeypointProto.KeypointType keypoint_detector = 3;
  if (has_keypoint_detector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->keypoint_detector(), target);
  }

  // optional .theia.KeypointProto.Location location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(), target);
  }

  // optional double strength = 5;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->strength(), target);
  }

  // optional double orientation = 6;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->orientation(), target);
  }

  // optional double scale = 7;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->scale(), target);
  }

  // optional int32 track_id = 8;
  if (has_track_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->track_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeypointProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 keypoint_id = 1;
    if (has_keypoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keypoint_id());
    }

    // optional int32 image_id = 2;
    if (has_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_id());
    }

    // optional .theia.KeypointProto.KeypointType keypoint_detector = 3;
    if (has_keypoint_detector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->keypoint_detector());
    }

    // optional .theia.KeypointProto.Location location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional double strength = 5;
    if (has_strength()) {
      total_size += 1 + 8;
    }

    // optional double orientation = 6;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

    // optional double scale = 7;
    if (has_scale()) {
      total_size += 1 + 8;
    }

    // optional int32 track_id = 8;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeypointProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeypointProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeypointProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeypointProto::MergeFrom(const KeypointProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keypoint_id()) {
      set_keypoint_id(from.keypoint_id());
    }
    if (from.has_image_id()) {
      set_image_id(from.image_id());
    }
    if (from.has_keypoint_detector()) {
      set_keypoint_detector(from.keypoint_detector());
    }
    if (from.has_location()) {
      mutable_location()->::theia::KeypointProto_Location::MergeFrom(from.location());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeypointProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeypointProto::CopyFrom(const KeypointProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointProto::IsInitialized() const {

  return true;
}

void KeypointProto::Swap(KeypointProto* other) {
  if (other != this) {
    std::swap(keypoint_id_, other->keypoint_id_);
    std::swap(image_id_, other->image_id_);
    std::swap(keypoint_detector_, other->keypoint_detector_);
    std::swap(location_, other->location_);
    std::swap(strength_, other->strength_);
    std::swap(orientation_, other->orientation_);
    std::swap(scale_, other->scale_);
    std::swap(track_id_, other->track_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeypointProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeypointProto_descriptor_;
  metadata.reflection = KeypointProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeypointsProto::kKeypointFieldNumber;
#endif  // !_MSC_VER

KeypointsProto::KeypointsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeypointsProto::InitAsDefaultInstance() {
}

KeypointsProto::KeypointsProto(const KeypointsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeypointsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeypointsProto::~KeypointsProto() {
  SharedDtor();
}

void KeypointsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeypointsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeypointsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeypointsProto_descriptor_;
}

const KeypointsProto& KeypointsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_image_2fkeypoint_5fdetector_2fkeypoint_2eproto();
  return *default_instance_;
}

KeypointsProto* KeypointsProto::default_instance_ = NULL;

KeypointsProto* KeypointsProto::New() const {
  return new KeypointsProto;
}

void KeypointsProto::Clear() {
  keypoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeypointsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .theia.KeypointProto keypoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keypoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keypoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeypointsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .theia.KeypointProto keypoint = 1;
  for (int i = 0; i < this->keypoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keypoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeypointsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .theia.KeypointProto keypoint = 1;
  for (int i = 0; i < this->keypoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keypoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeypointsProto::ByteSize() const {
  int total_size = 0;

  // repeated .theia.KeypointProto keypoint = 1;
  total_size += 1 * this->keypoint_size();
  for (int i = 0; i < this->keypoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keypoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeypointsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeypointsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeypointsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeypointsProto::MergeFrom(const KeypointsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypoint_.MergeFrom(from.keypoint_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeypointsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeypointsProto::CopyFrom(const KeypointsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointsProto::IsInitialized() const {

  return true;
}

void KeypointsProto::Swap(KeypointsProto* other) {
  if (other != this) {
    keypoint_.Swap(&other->keypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeypointsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeypointsProto_descriptor_;
  metadata.reflection = KeypointsProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace theia

// @@protoc_insertion_point(global_scope)
