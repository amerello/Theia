// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiments/sift_matches.proto

#ifndef PROTOBUF_experiments_2fsift_5fmatches_2eproto__INCLUDED
#define PROTOBUF_experiments_2fsift_5fmatches_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_experiments_2fsift_5fmatches_2eproto();
void protobuf_AssignDesc_experiments_2fsift_5fmatches_2eproto();
void protobuf_ShutdownFile_experiments_2fsift_5fmatches_2eproto();

class FeatureKnnProto;
class FeatureMatchProto;
class ImagePairMatchProto;

// ===================================================================

class FeatureKnnProto : public ::google::protobuf::Message {
 public:
  FeatureKnnProto();
  virtual ~FeatureKnnProto();

  FeatureKnnProto(const FeatureKnnProto& from);

  inline FeatureKnnProto& operator=(const FeatureKnnProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureKnnProto& default_instance();

  void Swap(FeatureKnnProto* other);

  // implements Message ----------------------------------------------

  FeatureKnnProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureKnnProto& from);
  void MergeFrom(const FeatureKnnProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 feature_id = 2;
  inline bool has_feature_id() const;
  inline void clear_feature_id();
  static const int kFeatureIdFieldNumber = 2;
  inline ::google::protobuf::uint32 feature_id() const;
  inline void set_feature_id(::google::protobuf::uint32 value);

  // optional float distance = 4;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 4;
  inline float distance() const;
  inline void set_distance(float value);

  // optional float scale = 5;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 5;
  inline float scale() const;
  inline void set_scale(float value);

  // @@protoc_insertion_point(class_scope:FeatureKnnProto)
 private:
  inline void set_has_feature_id();
  inline void clear_has_feature_id();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 feature_id_;
  float distance_;
  float scale_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_experiments_2fsift_5fmatches_2eproto();
  friend void protobuf_AssignDesc_experiments_2fsift_5fmatches_2eproto();
  friend void protobuf_ShutdownFile_experiments_2fsift_5fmatches_2eproto();

  void InitAsDefaultInstance();
  static FeatureKnnProto* default_instance_;
};
// -------------------------------------------------------------------

class FeatureMatchProto : public ::google::protobuf::Message {
 public:
  FeatureMatchProto();
  virtual ~FeatureMatchProto();

  FeatureMatchProto(const FeatureMatchProto& from);

  inline FeatureMatchProto& operator=(const FeatureMatchProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureMatchProto& default_instance();

  void Swap(FeatureMatchProto* other);

  // implements Message ----------------------------------------------

  FeatureMatchProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureMatchProto& from);
  void MergeFrom(const FeatureMatchProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 feature_id = 1;
  inline bool has_feature_id() const;
  inline void clear_feature_id();
  static const int kFeatureIdFieldNumber = 1;
  inline ::google::protobuf::uint32 feature_id() const;
  inline void set_feature_id(::google::protobuf::uint32 value);

  // optional float scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // repeated .FeatureKnnProto knn_match = 3;
  inline int knn_match_size() const;
  inline void clear_knn_match();
  static const int kKnnMatchFieldNumber = 3;
  inline const ::FeatureKnnProto& knn_match(int index) const;
  inline ::FeatureKnnProto* mutable_knn_match(int index);
  inline ::FeatureKnnProto* add_knn_match();
  inline const ::google::protobuf::RepeatedPtrField< ::FeatureKnnProto >&
      knn_match() const;
  inline ::google::protobuf::RepeatedPtrField< ::FeatureKnnProto >*
      mutable_knn_match();

  // @@protoc_insertion_point(class_scope:FeatureMatchProto)
 private:
  inline void set_has_feature_id();
  inline void clear_has_feature_id();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 feature_id_;
  float scale_;
  ::google::protobuf::RepeatedPtrField< ::FeatureKnnProto > knn_match_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_experiments_2fsift_5fmatches_2eproto();
  friend void protobuf_AssignDesc_experiments_2fsift_5fmatches_2eproto();
  friend void protobuf_ShutdownFile_experiments_2fsift_5fmatches_2eproto();

  void InitAsDefaultInstance();
  static FeatureMatchProto* default_instance_;
};
// -------------------------------------------------------------------

class ImagePairMatchProto : public ::google::protobuf::Message {
 public:
  ImagePairMatchProto();
  virtual ~ImagePairMatchProto();

  ImagePairMatchProto(const ImagePairMatchProto& from);

  inline ImagePairMatchProto& operator=(const ImagePairMatchProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagePairMatchProto& default_instance();

  void Swap(ImagePairMatchProto* other);

  // implements Message ----------------------------------------------

  ImagePairMatchProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImagePairMatchProto& from);
  void MergeFrom(const ImagePairMatchProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 image1_id = 1;
  inline bool has_image1_id() const;
  inline void clear_image1_id();
  static const int kImage1IdFieldNumber = 1;
  inline ::google::protobuf::uint32 image1_id() const;
  inline void set_image1_id(::google::protobuf::uint32 value);

  // optional uint32 image2_id = 2;
  inline bool has_image2_id() const;
  inline void clear_image2_id();
  static const int kImage2IdFieldNumber = 2;
  inline ::google::protobuf::uint32 image2_id() const;
  inline void set_image2_id(::google::protobuf::uint32 value);

  // repeated .FeatureMatchProto feature_match = 3;
  inline int feature_match_size() const;
  inline void clear_feature_match();
  static const int kFeatureMatchFieldNumber = 3;
  inline const ::FeatureMatchProto& feature_match(int index) const;
  inline ::FeatureMatchProto* mutable_feature_match(int index);
  inline ::FeatureMatchProto* add_feature_match();
  inline const ::google::protobuf::RepeatedPtrField< ::FeatureMatchProto >&
      feature_match() const;
  inline ::google::protobuf::RepeatedPtrField< ::FeatureMatchProto >*
      mutable_feature_match();

  // @@protoc_insertion_point(class_scope:ImagePairMatchProto)
 private:
  inline void set_has_image1_id();
  inline void clear_has_image1_id();
  inline void set_has_image2_id();
  inline void clear_has_image2_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 image1_id_;
  ::google::protobuf::uint32 image2_id_;
  ::google::protobuf::RepeatedPtrField< ::FeatureMatchProto > feature_match_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_experiments_2fsift_5fmatches_2eproto();
  friend void protobuf_AssignDesc_experiments_2fsift_5fmatches_2eproto();
  friend void protobuf_ShutdownFile_experiments_2fsift_5fmatches_2eproto();

  void InitAsDefaultInstance();
  static ImagePairMatchProto* default_instance_;
};
// ===================================================================


// ===================================================================

// FeatureKnnProto

// optional uint32 feature_id = 2;
inline bool FeatureKnnProto::has_feature_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureKnnProto::set_has_feature_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureKnnProto::clear_has_feature_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureKnnProto::clear_feature_id() {
  feature_id_ = 0u;
  clear_has_feature_id();
}
inline ::google::protobuf::uint32 FeatureKnnProto::feature_id() const {
  return feature_id_;
}
inline void FeatureKnnProto::set_feature_id(::google::protobuf::uint32 value) {
  set_has_feature_id();
  feature_id_ = value;
}

// optional float distance = 4;
inline bool FeatureKnnProto::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureKnnProto::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureKnnProto::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureKnnProto::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float FeatureKnnProto::distance() const {
  return distance_;
}
inline void FeatureKnnProto::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// optional float scale = 5;
inline bool FeatureKnnProto::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureKnnProto::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureKnnProto::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureKnnProto::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float FeatureKnnProto::scale() const {
  return scale_;
}
inline void FeatureKnnProto::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// -------------------------------------------------------------------

// FeatureMatchProto

// optional uint32 feature_id = 1;
inline bool FeatureMatchProto::has_feature_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureMatchProto::set_has_feature_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureMatchProto::clear_has_feature_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureMatchProto::clear_feature_id() {
  feature_id_ = 0u;
  clear_has_feature_id();
}
inline ::google::protobuf::uint32 FeatureMatchProto::feature_id() const {
  return feature_id_;
}
inline void FeatureMatchProto::set_feature_id(::google::protobuf::uint32 value) {
  set_has_feature_id();
  feature_id_ = value;
}

// optional float scale = 2;
inline bool FeatureMatchProto::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureMatchProto::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureMatchProto::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureMatchProto::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float FeatureMatchProto::scale() const {
  return scale_;
}
inline void FeatureMatchProto::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// repeated .FeatureKnnProto knn_match = 3;
inline int FeatureMatchProto::knn_match_size() const {
  return knn_match_.size();
}
inline void FeatureMatchProto::clear_knn_match() {
  knn_match_.Clear();
}
inline const ::FeatureKnnProto& FeatureMatchProto::knn_match(int index) const {
  return knn_match_.Get(index);
}
inline ::FeatureKnnProto* FeatureMatchProto::mutable_knn_match(int index) {
  return knn_match_.Mutable(index);
}
inline ::FeatureKnnProto* FeatureMatchProto::add_knn_match() {
  return knn_match_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FeatureKnnProto >&
FeatureMatchProto::knn_match() const {
  return knn_match_;
}
inline ::google::protobuf::RepeatedPtrField< ::FeatureKnnProto >*
FeatureMatchProto::mutable_knn_match() {
  return &knn_match_;
}

// -------------------------------------------------------------------

// ImagePairMatchProto

// optional uint32 image1_id = 1;
inline bool ImagePairMatchProto::has_image1_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImagePairMatchProto::set_has_image1_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImagePairMatchProto::clear_has_image1_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImagePairMatchProto::clear_image1_id() {
  image1_id_ = 0u;
  clear_has_image1_id();
}
inline ::google::protobuf::uint32 ImagePairMatchProto::image1_id() const {
  return image1_id_;
}
inline void ImagePairMatchProto::set_image1_id(::google::protobuf::uint32 value) {
  set_has_image1_id();
  image1_id_ = value;
}

// optional uint32 image2_id = 2;
inline bool ImagePairMatchProto::has_image2_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImagePairMatchProto::set_has_image2_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImagePairMatchProto::clear_has_image2_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImagePairMatchProto::clear_image2_id() {
  image2_id_ = 0u;
  clear_has_image2_id();
}
inline ::google::protobuf::uint32 ImagePairMatchProto::image2_id() const {
  return image2_id_;
}
inline void ImagePairMatchProto::set_image2_id(::google::protobuf::uint32 value) {
  set_has_image2_id();
  image2_id_ = value;
}

// repeated .FeatureMatchProto feature_match = 3;
inline int ImagePairMatchProto::feature_match_size() const {
  return feature_match_.size();
}
inline void ImagePairMatchProto::clear_feature_match() {
  feature_match_.Clear();
}
inline const ::FeatureMatchProto& ImagePairMatchProto::feature_match(int index) const {
  return feature_match_.Get(index);
}
inline ::FeatureMatchProto* ImagePairMatchProto::mutable_feature_match(int index) {
  return feature_match_.Mutable(index);
}
inline ::FeatureMatchProto* ImagePairMatchProto::add_feature_match() {
  return feature_match_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FeatureMatchProto >&
ImagePairMatchProto::feature_match() const {
  return feature_match_;
}
inline ::google::protobuf::RepeatedPtrField< ::FeatureMatchProto >*
ImagePairMatchProto::mutable_feature_match() {
  return &feature_match_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_experiments_2fsift_5fmatches_2eproto__INCLUDED
